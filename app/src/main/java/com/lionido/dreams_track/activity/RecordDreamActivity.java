package com.lionido.dreams_track.activity;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.lionido.dreams_track.R;
import com.lionido.dreams_track.database.AppDatabase;
import com.lionido.dreams_track.database.DreamDao;
import com.lionido.dreams_track.database.DreamEntity;
import com.lionido.dreams_track.model.Symbol;
import com.lionido.dreams_track.utils.EmotionDetector;
import com.lionido.dreams_track.utils.GeminiAnalyzer;
import com.lionido.dreams_track.utils.NLPAnalyzer;
import com.lionido.dreams_track.utils.SpeechHelper;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class RecordDreamActivity extends AppCompatActivity implements SpeechHelper.OnSpeechResultListener {

    private static final String PREFS_NAME = "DreamTrackPrefs";
    private static final String PREF_GEMINI_API_KEY = "gemini_api_key";
    private static final String PREF_USE_GEMINI = "use_gemini";

    private ToggleButton toggleInputMode;
    private Button recordButton;
    private EditText editTextDream;
    private TextView statusText;
    private TextView transcriptText;
    private Button analyzeButton;
    private Button saveButton;
    private Button settingsButton;
    private ProgressBar progressBar;

    private SpeechHelper speechHelper;
    private NLPAnalyzer nlpAnalyzer;
    private EmotionDetector emotionDetector;
    private GeminiAnalyzer geminiAnalyzer;

    private AppDatabase database;
    private DreamDao dreamDao;
    private ExecutorService executor;
    private SharedPreferences prefs;

    private String currentTranscript = "";
    private String currentInputMethod = "voice";
    private List<Symbol> analyzedSymbols;
    private String analyzedEmotion;
    private String geminiInterpretation = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_record_dream_enhanced);

        initializePreferences();
        initializeDatabase();
        initializeViews();
        initializeHelpers();
        checkGeminiSetup();
    }

    private void initializePreferences() {
        prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);
    }

    private void initializeDatabase() {
        database = AppDatabase.getDatabase(this);
        dreamDao = database.dreamDao();
        executor = Executors.newFixedThreadPool(2);
    }

    private void initializeViews() {
        toggleInputMode = findViewById(R.id.toggle_input_mode);
        recordButton = findViewById(R.id.btn_record);
        editTextDream = findViewById(R.id.edit_dream_text);
        statusText = findViewById(R.id.tv_status);
        transcriptText = findViewById(R.id.tv_transcript);
        analyzeButton = findViewById(R.id.btn_analyze);
        saveButton = findViewById(R.id.btn_save);
        settingsButton = findViewById(R.id.btn_settings);
        progressBar = findViewById(R.id.progress_bar);

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≥–æ–ª–æ—Å–æ–≤—ã–º –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º
        toggleInputMode.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                switchToTextMode();
            } else {
                switchToVoiceMode();
            }
        });

        recordButton.setOnClickListener(v -> {
            if (recordButton.getText().equals("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")) {
                startRecording();
            } else {
                stopRecording();
            }
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
        editTextDream.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {}

            @Override
            public void afterTextChanged(Editable s) {
                currentTranscript = s.toString();
                analyzeButton.setEnabled(!currentTranscript.trim().isEmpty());
                transcriptText.setText(currentTranscript);
            }
        });

        analyzeButton.setOnClickListener(v -> analyzeDream());
        saveButton.setOnClickListener(v -> saveDream());
        settingsButton.setOnClickListener(v -> showGeminiSettings());

        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
        analyzeButton.setEnabled(false);
        saveButton.setEnabled(false);

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º
        switchToVoiceMode();
    }

    private void initializeHelpers() {
        speechHelper = new SpeechHelper(this);
        speechHelper.setOnSpeechResultListener(this);
        nlpAnalyzer = new NLPAnalyzer(this);
        emotionDetector = new EmotionDetector();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini –µ—Å–ª–∏ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        String apiKey = prefs.getString(PREF_GEMINI_API_KEY, "");
        if (GeminiAnalyzer.isApiKeyValid(apiKey)) {
            geminiAnalyzer = new GeminiAnalyzer(this, apiKey);
        }
    }

    private void checkGeminiSetup() {
        boolean useGemini = prefs.getBoolean(PREF_USE_GEMINI, false);
        String apiKey = prefs.getString(PREF_GEMINI_API_KEY, "");

        if (useGemini && !GeminiAnalyzer.isApiKeyValid(apiKey)) {
            showGeminiSetupDialog();
        }

        updateAnalyzeButtonText();
    }

    private void updateAnalyzeButtonText() {
        boolean useGemini = prefs.getBoolean(PREF_USE_GEMINI, false);
        String apiKey = prefs.getString(PREF_GEMINI_API_KEY, "");

        if (useGemini && GeminiAnalyzer.isApiKeyValid(apiKey)) {
            analyzeButton.setText("ü§ñ –ê–Ω–∞–ª–∏–∑ —Å –ò–ò");
        } else {
            analyzeButton.setText("üîç –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑");
        }
    }

    private void switchToVoiceMode() {
        currentInputMethod = "voice";
        recordButton.setVisibility(View.VISIBLE);
        findViewById(R.id.scroll_text_input).setVisibility(View.GONE);
        findViewById(R.id.scroll_transcript).setVisibility(View.VISIBLE);
        statusText.setText("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏");
        toggleInputMode.setText("–ì–æ–ª–æ—Å");
    }

    private void switchToTextMode() {
        currentInputMethod = "text";
        recordButton.setVisibility(View.GONE);
        findViewById(R.id.scroll_text_input).setVisibility(View.VISIBLE);
        findViewById(R.id.scroll_transcript).setVisibility(View.VISIBLE);
        statusText.setText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–∞");
        toggleInputMode.setText("–¢–µ–∫—Å—Ç");
        editTextDream.requestFocus();
    }

    private void startRecording() {
        recordButton.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å");
        statusText.setText("–ì–æ–≤–æ—Ä–∏—Ç–µ...");
        speechHelper.startListening();
    }

    private void stopRecording() {
        recordButton.setText("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å");
        statusText.setText("–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        speechHelper.stopListening();
    }

    @Override
    public void onSpeechResult(String text) {
        currentTranscript = text;
        transcriptText.setText(text);
        statusText.setText("–†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞");
        analyzeButton.setEnabled(true);
    }

    @Override
    public void onSpeechError(String error) {
        statusText.setText("–û—à–∏–±–∫–∞: " + error);
        recordButton.setText("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å");
    }

    @Override
    public void onSpeechReady() {
        statusText.setText("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏");
    }

    @Override
    public void onSpeechStarted() {
        statusText.setText("–ó–∞–ø–∏—Å—å...");
    }

    @Override
    public void onSpeechEnded() {
        statusText.setText("–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    private void analyzeDream() {
        if (currentTranscript.trim().isEmpty()) {
            Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ —Å–æ–Ω", Toast.LENGTH_SHORT).show();
            return;
        }

        boolean useGemini = prefs.getBoolean(PREF_USE_GEMINI, false);
        String apiKey = prefs.getString(PREF_GEMINI_API_KEY, "");

        if (useGemini && GeminiAnalyzer.isApiKeyValid(apiKey) && geminiAnalyzer != null) {
            analyzeWithGemini();
        } else {
            analyzeWithLocalNLP();
        }
    }

    private void analyzeWithGemini() {
        statusText.setText("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–Ω...");
        progressBar.setVisibility(View.VISIBLE);
        analyzeButton.setEnabled(false);

        geminiAnalyzer.analyzeDreamAsync(currentTranscript, new GeminiAnalyzer.OnAnalysisCompleteListener() {
            @Override
            public void onSuccess(List<Symbol> symbols, String emotion, String interpretation) {
                runOnUiThread(() -> {
                    analyzedSymbols = symbols;
                    analyzedEmotion = emotion;
                    geminiInterpretation = interpretation;

                    showGeminiAnalysisResults();

                    progressBar.setVisibility(View.GONE);
                    analyzeButton.setEnabled(true);
                    saveButton.setEnabled(true);
                    statusText.setText("‚ú® –ê–Ω–∞–ª–∏–∑ –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω");
                });
            }

            @Override
            public void onError(String error) {
                runOnUiThread(() -> {
                    progressBar.setVisibility(View.GONE);
                    analyzeButton.setEnabled(true);
                    statusText.setText("‚ùå –û—à–∏–±–∫–∞ –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑");

                    // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
                    analyzeWithLocalNLP();
                });
            }
        });
    }

    private void analyzeWithLocalNLP() {
        statusText.setText("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–Ω...");
        progressBar.setVisibility(View.VISIBLE);

        executor.execute(() -> {
            // –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analyzedSymbols = nlpAnalyzer.findSymbolsAdvanced(currentTranscript);
            analyzedEmotion = nlpAnalyzer.detectEmotionAdvanced(currentTranscript);
            geminiInterpretation = ""; // –ù–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò

            runOnUiThread(() -> {
                showLocalAnalysisResults();
                progressBar.setVisibility(View.GONE);
                saveButton.setEnabled(true);
                statusText.setText("üìä –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω");
            });
        });
    }

    private void showGeminiAnalysisResults() {
        StringBuilder result = new StringBuilder();
        result.append("ü§ñ –ê–Ω–∞–ª–∏–∑ –ò–ò\n\n");
        result.append("üìù –¢–µ–∫—Å—Ç —Å–Ω–∞:\n").append(currentTranscript).append("\n\n");

        result.append("üòä –≠–º–æ—Ü–∏—è: ").append(emotionDetector.getEmotionDisplayName(analyzedEmotion)).append("\n\n");

        if (analyzedSymbols != null && !analyzedSymbols.isEmpty()) {
            result.append("üîÆ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:\n");
            for (Symbol symbol : analyzedSymbols) {
                result.append("‚Ä¢ ").append(symbol.getKeyword()).append(": ").append(symbol.getInterpretation()).append("\n");
            }
            result.append("\n");
        }

        if (!geminiInterpretation.isEmpty()) {
            result.append("üß† –û–±—â–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n").append(geminiInterpretation);
        }

        transcriptText.setText(result.toString());
    }

    private void showLocalAnalysisResults() {
        StringBuilder result = new StringBuilder();
        result.append("üìä –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n\n");
        result.append("üìù –¢–µ–∫—Å—Ç —Å–Ω–∞:\n").append(currentTranscript).append("\n\n");

        result.append("üòä –≠–º–æ—Ü–∏—è: ").append(emotionDetector.getEmotionDisplayName(analyzedEmotion)).append("\n\n");

        if (analyzedSymbols != null && !analyzedSymbols.isEmpty()) {
            result.append("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:\n");
            for (Symbol symbol : analyzedSymbols) {
                result.append("‚Ä¢ ").append(symbol.getKeyword()).append(": ").append(symbol.getInterpretation()).append("\n");
            }
        } else {
            result.append("–°–∏–º–≤–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }

        transcriptText.setText(result.toString());
    }

    private void showGeminiSettings() {
        View dialogView = getLayoutInflater().inflate(R.layout.dialog_gemini_settings, null);
        EditText editApiKey = dialogView.findViewById(R.id.edit_api_key);
        TextView tvInfo = dialogView.findViewById(R.id.tv_gemini_info);

        editApiKey.setText(prefs.getString(PREF_GEMINI_API_KEY, ""));
        tvInfo.setText(GeminiAnalyzer.getUsageInfo());

        new AlertDialog.Builder(this)
                .setTitle("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
                .setView(dialogView)
                .setPositiveButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", (dialog, which) -> {
                    String apiKey = editApiKey.getText().toString().trim();
                    prefs.edit()
                            .putString(PREF_GEMINI_API_KEY, apiKey)
                            .putBoolean(PREF_USE_GEMINI, GeminiAnalyzer.isApiKeyValid(apiKey))
                            .apply();

                    if (GeminiAnalyzer.isApiKeyValid(apiKey)) {
                        geminiAnalyzer = new GeminiAnalyzer(this, apiKey);
                        Toast.makeText(this, "‚úÖ Gemini –ò–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", Toast.LENGTH_SHORT).show();
                    } else {
                        geminiAnalyzer = null;
                        Toast.makeText(this, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á", Toast.LENGTH_SHORT).show();
                    }
                    updateAnalyzeButtonText();
                })
                .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
                .setNeutralButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á?", (dialog, which) -> showApiKeyHelp())
                .show();
    }

    private void showGeminiSetupDialog() {
        new AlertDialog.Builder(this)
                .setTitle("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ò–ò")
                .setMessage("–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Gemini –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤?\n\n" +
                        "‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n" +
                        "‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤\n" +
                        "‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è\n" +
                        "‚Ä¢ –£—á–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω—é–∞–Ω—Å–æ–≤\n\n" +
                        "üÜì –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ!")
                .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", (dialog, which) -> showGeminiSettings())
                .setNegativeButton("–ü–æ–∑–∂–µ", null)
                .show();
    }

    private void showApiKeyHelp() {
        new AlertDialog.Builder(this)
                .setTitle("üîë –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á")
                .setMessage("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://makersuite.google.com/app/apikey\n\n" +
                        "2. –í–æ–π–¥–∏—Ç–µ –≤ Google –∞–∫–∫–∞—É–Ω—Ç\n\n" +
                        "3. –ù–∞–∂–º–∏—Ç–µ 'Create API key'\n\n" +
                        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ\n\n" +
                        "‚ö†Ô∏è –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'AIza'")
                .setPositiveButton("–ü–æ–Ω—è—Ç–Ω–æ", null)
                .show();
    }

    private void saveDream() {
        if (currentTranscript.trim().isEmpty()) {
            Toast.makeText(this, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", Toast.LENGTH_SHORT).show();
            return;
        }

        statusText.setText("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Å–æ–Ω...");

        executor.execute(() -> {
            DreamEntity dreamEntity = new DreamEntity(currentTranscript, null, currentInputMethod);
            dreamEntity.setSymbols(analyzedSymbols);
            dreamEntity.setEmotion(analyzedEmotion);

            long dreamId = dreamDao.insert(dreamEntity);

            runOnUiThread(() -> {
                if (dreamId > 0) {
                    Toast.makeText(this, "‚úÖ –°–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω", Toast.LENGTH_SHORT).show();
                    finish();
                } else {
                    Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", Toast.LENGTH_SHORT).show();
                    statusText.setText("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
                }
            });
        });
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (speechHelper != null) {
            speechHelper.destroy();
        }
        if (executor != null) {
            executor.shutdown();
        }
    }
}